- abstract visitor method in node headers uisng a macro
- make something to better split between builder and initializer / decl

expr {
    node self
}

binop {
    expr
    node
    *lhs
    *rhs
}

-----------

expr {
    node    
    node 
}

binop {
    node
    *lhs
    *rhs
}



===> how to apply visitor on expr ?

struct node {
    ir_node_method accept;
    const char *type;
};

----

// S1
struct instr {
    node            node;
    node            *value;
    struct instr    *prev;
    struct instr    *next;
};

struct assign_temp {
    node    node;
    int     id;
    expr    *e;
};



// S2

struct instr {
    node            node;// instr_accept
    struct instr    *prev;
    struct instr    *next;
    node    node; // value_accept
};

struct assign_temp {
    instr   instr;
    int     id;
    expr    *e;
};

// S3

struct instr {
    node            node;// instr_accept, but how to call value accept here from instr_accept ??
    struct instr    *prev;
    struct instr    *next;
};

struct assign_temp {
    instr   instr;
    node    node; // value_accept
    int     id;
    expr    *e;
};


// S4

struct instr {
    node            node;// instr_accept
    struct instr    *prev;
    struct instr    *next;
    node            *node; //... ptr to assign_temp...
};



//////


struct instr {
    node            node;   // instr_accept
    struct instr    *prev;
    struct instr    *next;
    node            impl;   // value_accept
};

struct value {
    
}